{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Travis\\\\projects\\\\Thinkful\\\\react\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from '../utils/duration';\nimport { secondsToDuration } from '../utils/duration';\nimport PlayStop from \"./PlayStop\";\nimport BreakDuration from \"./BreakDuration\";\nimport FocusDuration from \"./FocusDuration\";\n\nfunction Pomodoro() {\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [firstPlay, setFirstPlay] = useState(true);\n  const [onBreak, setOnBreak] = useState(false);\n  const [focusDurationMinutes, setFocusDurationMinutes] = useState(25);\n  const [breakDurationMinutes, setBreakDurationMinutes] = useState(5);\n  const [durationMinutes, setDurationMinutes] = useState(25);\n  const [durationSeconds, setDurationSeconds] = useState(0);\n  const [initialDuration, setInitialDuration] = useState(25);\n  const [initialBreakDuration, setInitialBreakDuration] = useState(5);\n  const [durationProgress, setDurationProgress] = useState(0);\n\n  const decreaseFocusDuration = () => {\n    if (focusDurationMinutes > 5 && !isTimerRunning && firstPlay) setFocusDurationMinutes(minutes => minutes -= 5);\n  };\n\n  const increaseFocusDuration = () => {\n    if (focusDurationMinutes < 60 && !isTimerRunning && firstPlay) setFocusDurationMinutes(minutes => minutes += 5);\n  };\n\n  const decreaseBreakDuration = () => {\n    if (breakDurationMinutes > 1 && !isTimerRunning && firstPlay) setBreakDurationMinutes(minutes => minutes -= 1);\n  };\n\n  const increaseBreakDuration = () => {\n    if (breakDurationMinutes < 15 && !isTimerRunning && firstPlay) setBreakDurationMinutes(minutes => minutes += 1);\n  };\n\n  function percentage(currentMinutes, currentSeconds, initialMinutes) {\n    return 100 - (currentMinutes * 60 + currentSeconds) / (initialMinutes * 60) * 100;\n  }\n\n  useInterval(() => {\n    // What should happen when the timer is running\n    setIsTimerRunning(true);\n    setDurationSeconds(second => {\n      second === 0 ? second = 59 : second -= 1;\n      if (second === 59) setDurationMinutes(minutes => minutes = durationMinutes - 1);\n      return second;\n    });\n    if (onBreak) setDurationProgress(currentProgress => currentProgress = percentage(durationMinutes, durationSeconds, initialBreakDuration));else setDurationProgress(currentProgress => currentProgress = percentage(durationMinutes, durationSeconds, initialDuration));\n    if (durationMinutes === 0 && durationSeconds === 1) timerExpired();\n  }, isTimerRunning ? 1000 : null);\n\n  function timerExpired() {\n    if (!onBreak) focusSessionExpired();else breakSessionExpired();\n  } // Start our break session\n\n\n  function focusSessionExpired() {\n    new Audio(`${process.env.PUBLIC_URL}/alarm/submarine-dive-horn.mp3`).play();\n    setOnBreak(state => state = true);\n    setDurationProgress(progress => progress = 0);\n    setDurationSeconds(seconds => seconds = 0);\n    setDurationMinutes(minutes => minutes = initialBreakDuration);\n  } // Reset our focus session\n\n\n  function breakSessionExpired() {\n    new Audio(`${process.env.PUBLIC_URL}/alarm/alarm-clock-small-beeps.mp3`).play();\n    setOnBreak(state => state = false);\n    setDurationProgress(progress => progress = 0);\n    setDurationSeconds(seconds => seconds = 0);\n    setDurationMinutes(minutes => minutes = initialDuration);\n  }\n\n  function playPause() {\n    if (firstPlay) {\n      setInitialDuration(duration => duration = focusDurationMinutes);\n      setInitialBreakDuration(duration => duration = breakDurationMinutes);\n      setDurationMinutes(duration => duration = focusDurationMinutes);\n      setFirstPlay(state => state = false);\n    }\n\n    setIsTimerRunning(prevState => !prevState);\n  }\n\n  function stopButton() {\n    setFirstPlay(state => state = true);\n    setIsTimerRunning(state => state = false);\n    setOnBreak(state => state = false);\n    setDurationProgress(progress => progress = 0);\n    setDurationSeconds(seconds => seconds = 0);\n    setDurationMinutes(duration => duration = focusDurationMinutes);\n    setInitialDuration(duration => duration = focusDurationMinutes);\n    setInitialBreakDuration(duration => duration = breakDurationMinutes);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FocusDuration, {\n    focusDurationMinutes: focusDurationMinutes,\n    decreaseFocusDuration: decreaseFocusDuration,\n    increaseFocusDuration: increaseFocusDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BreakDuration, {\n    breakDurationMinutes: breakDurationMinutes,\n    decreaseBreakDuration: decreaseBreakDuration,\n    increaseBreakDuration: increaseBreakDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(PlayStop, {\n    playPause: playPause,\n    classNames: classNames,\n    isTimerRunning: isTimerRunning,\n    stopButton: stopButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, !onBreak ? \"Focusing\" : \"On Break\", \" for \", !onBreak ? minutesToDuration(initialDuration) : minutesToDuration(initialBreakDuration), \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, secondsToDuration(durationMinutes * 60 + durationSeconds), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": durationProgress,\n    style: {\n      width: `${durationProgress}%`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  }))))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/Travis/projects/Thinkful/react/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","minutesToDuration","secondsToDuration","PlayStop","BreakDuration","FocusDuration","Pomodoro","isTimerRunning","setIsTimerRunning","firstPlay","setFirstPlay","onBreak","setOnBreak","focusDurationMinutes","setFocusDurationMinutes","breakDurationMinutes","setBreakDurationMinutes","durationMinutes","setDurationMinutes","durationSeconds","setDurationSeconds","initialDuration","setInitialDuration","initialBreakDuration","setInitialBreakDuration","durationProgress","setDurationProgress","decreaseFocusDuration","minutes","increaseFocusDuration","decreaseBreakDuration","increaseBreakDuration","percentage","currentMinutes","currentSeconds","initialMinutes","second","currentProgress","timerExpired","focusSessionExpired","breakSessionExpired","Audio","process","env","PUBLIC_URL","play","state","progress","seconds","playPause","duration","prevState","stopButton","height","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from '../utils/duration';\nimport { secondsToDuration } from '../utils/duration';\nimport PlayStop from \"./PlayStop\";\nimport BreakDuration from \"./BreakDuration\";\nimport FocusDuration from \"./FocusDuration\";\n\nfunction Pomodoro() {\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [firstPlay, setFirstPlay] = useState(true);\n  const [onBreak, setOnBreak] = useState(false);\n\n  const [focusDurationMinutes, setFocusDurationMinutes] = useState(25);\n  const [breakDurationMinutes, setBreakDurationMinutes] = useState(5);\n  const [durationMinutes, setDurationMinutes] = useState(25);\n  const [durationSeconds, setDurationSeconds] = useState(0);\n  const [initialDuration, setInitialDuration] = useState(25);\n  const [initialBreakDuration, setInitialBreakDuration] = useState(5);\n\n  const [durationProgress, setDurationProgress] = useState(0);\n\n  const decreaseFocusDuration = () => {\n    if (focusDurationMinutes > 5 && !isTimerRunning && firstPlay)\n      setFocusDurationMinutes(minutes => minutes -= 5);\n  }\n\n  const increaseFocusDuration = () => {\n    if (focusDurationMinutes < 60 && !isTimerRunning && firstPlay)\n      setFocusDurationMinutes(minutes => minutes += 5);\n  }\n\n  const decreaseBreakDuration = () => {\n    if (breakDurationMinutes > 1 && !isTimerRunning && firstPlay)\n      setBreakDurationMinutes(minutes => minutes -= 1);\n  }\n\n  const increaseBreakDuration = () => {\n    if (breakDurationMinutes < 15 && !isTimerRunning && firstPlay)\n      setBreakDurationMinutes(minutes => minutes += 1);\n  }\n\n  function percentage(currentMinutes, currentSeconds, initialMinutes) {\n    return 100 - (((currentMinutes * 60) + currentSeconds) / (initialMinutes * 60) * 100);\n  }\n\n  useInterval(\n    () => {\n      // What should happen when the timer is running\n      setIsTimerRunning(true);\n      setDurationSeconds(second => {\n        second === 0 ? second = 59 : second -= 1;\n        if (second === 59)\n          setDurationMinutes(minutes => minutes = durationMinutes - 1);\n        return second;\n      });\n\n      if (onBreak)\n        setDurationProgress(currentProgress => currentProgress = percentage(durationMinutes, durationSeconds, initialBreakDuration))\n      else\n        setDurationProgress(currentProgress => currentProgress = percentage(durationMinutes, durationSeconds, initialDuration))\n\n      if (durationMinutes === 0 && durationSeconds === 1)\n        timerExpired();\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function timerExpired() {\n    if (!onBreak)\n      focusSessionExpired();\n    else\n      breakSessionExpired();\n  }\n\n  // Start our break session\n  function focusSessionExpired() {\n    new Audio(`${process.env.PUBLIC_URL}/alarm/submarine-dive-horn.mp3`).play();\n    setOnBreak(state => state = true);\n    setDurationProgress(progress => progress = 0);\n    setDurationSeconds(seconds => seconds = 0);\n    setDurationMinutes(minutes => minutes = initialBreakDuration);\n  }\n\n  // Reset our focus session\n  function breakSessionExpired() {\n    new Audio(`${process.env.PUBLIC_URL}/alarm/alarm-clock-small-beeps.mp3`).play();\n    setOnBreak(state => state = false);\n    setDurationProgress(progress => progress = 0);\n    setDurationSeconds(seconds => seconds = 0);\n    setDurationMinutes(minutes => minutes = initialDuration);\n  }\n\n  function playPause() {\n    if (firstPlay) {\n      setInitialDuration(duration => duration = focusDurationMinutes);\n      setInitialBreakDuration(duration => duration = breakDurationMinutes);\n      setDurationMinutes(duration => duration = focusDurationMinutes);\n      setFirstPlay(state => state = false);\n    }\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  function stopButton() {\n    setFirstPlay(state => state = true);\n    setIsTimerRunning(state => state = false);\n    setOnBreak(state => state = false);\n\n    setDurationProgress(progress => progress = 0);\n    setDurationSeconds(seconds => seconds = 0);\n    setDurationMinutes(duration => duration = focusDurationMinutes);\n    setInitialDuration(duration => duration = focusDurationMinutes);\n    setInitialBreakDuration(duration => duration = breakDurationMinutes);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <FocusDuration focusDurationMinutes={focusDurationMinutes} decreaseFocusDuration={decreaseFocusDuration} increaseFocusDuration={increaseFocusDuration} />\n        <BreakDuration breakDurationMinutes={breakDurationMinutes} decreaseBreakDuration={decreaseBreakDuration} increaseBreakDuration={increaseBreakDuration} />\n      </div>\n      <PlayStop playPause={playPause} classNames={classNames} isTimerRunning={isTimerRunning} stopButton={stopButton} />\n      <div>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <h2 data-testid=\"session-title\">\n              {!onBreak ? \"Focusing\" : \"On Break\"} for {!onBreak ? minutesToDuration(initialDuration) : minutesToDuration(initialBreakDuration)} minutes\n          </h2>\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration((durationMinutes * 60) + durationSeconds)} remaining\n          </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={durationProgress}\n                style={{ width: `${durationProgress}%` }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;"]},"metadata":{},"sourceType":"module"}