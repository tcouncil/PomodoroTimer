{"version":3,"sources":["utils/class-names/index.js","utils/duration/index.js","pomodoro/PlayStop.jsx","pomodoro/BreakDuration.jsx","pomodoro/FocusDuration.jsx","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["classNames","classNameToBoolean","Object","entries","reduce","classes","className","value","concat","undefined","filter","join","minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","PlayStop","props","playPause","isTimerRunning","stopButton","role","aria-label","type","data-testid","title","onClick","oi","BreakDuration","breakDurationMinutes","increaseBreakDuration","decreaseBreakDuration","FocusDuration","focusDurationMinutes","increaseFocusDuration","decreaseFocusDuration","Pomodoro","useState","setIsTimerRunning","firstPlay","setFirstPlay","onBreak","setOnBreak","activeSession","setActiveSession","setFocusDurationMinutes","setBreakDurationMinutes","durationMinutes","setDurationMinutes","durationSeconds","setDurationSeconds","initialDuration","setInitialDuration","initialBreakDuration","setInitialBreakDuration","durationProgress","setDurationProgress","percentage","currentMinutes","currentSeconds","initialMinutes","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","second","currentProgress","Audio","play","state","progress","seconds","duration","prevState","style","display","givenSeconds","round","secondsToDuration","height","aria-valuemin","aria-valuemax","aria-valuenow","width","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gLAkBe,SAASA,EAAWC,GACjC,OAAOC,OAAOC,QAAQF,GACnBG,QACC,SAACC,EAAD,0BAAWC,EAAX,KAAsBC,EAAtB,YACEF,EAAQG,OAAOD,EAAQD,OAAYG,KACrC,IAEDC,QAAO,SAACJ,GAAD,YAA6BG,IAAdH,KACtBK,KAAK,KCbH,SAASC,EAAkBC,GAChC,IAAMC,EAAUC,KAAKC,MAAMH,GAAcI,WAAWC,SAAS,EAAG,KAChE,MAAM,GAAN,OAAUJ,EAAV,OCba,SAASK,EAASC,GAAQ,IAC/BC,EAAsDD,EAAtDC,UAAWrB,EAA2CoB,EAA3CpB,WAAYsB,EAA+BF,EAA/BE,eAAgBC,EAAeH,EAAfG,WAC/C,OACE,yBAAKjB,UAAU,OACb,yBAAKA,UAAU,OACb,yBACEA,UAAU,8BACVkB,KAAK,QACLC,aAAW,kBAEX,4BACEC,KAAK,SACLpB,UAAU,kBACVqB,cAAY,aACZC,MAAM,uBACNC,QAASR,GAET,0BACEf,UAAWN,EAAW,CACpB8B,IAAI,EACJ,iBAAkBR,EAClB,iBAAkBA,OAKxB,4BACEO,QAASN,EACTG,KAAK,SACLpB,UAAU,oBACVsB,MAAM,oBAEN,0BAAMtB,UAAU,yBC/Bb,SAASyB,EAAcX,GAAQ,IAE1CY,EAGEZ,EAHFY,qBACAC,EAEEb,EAFFa,sBACAC,EACEd,EADFc,sBAEF,OACE,yBAAK5B,UAAU,OACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,mCACb,0BAAMA,UAAU,mBAAmBqB,cAAY,kBAA/C,mBAEmBf,EAAkBoB,IAErC,yBAAK1B,UAAU,sBAEb,4BACEuB,QAASK,EACTR,KAAK,SACLpB,UAAU,oBACVqB,cAAY,kBAEZ,0BAAMrB,UAAU,iBAGlB,4BACEuB,QAASI,EACTP,KAAK,SACLpB,UAAU,oBACVqB,cAAY,kBAEZ,0BAAMrB,UAAU,oBC/Bf,SAAS6B,EAAcf,GAAQ,IAE1CgB,EAGEhB,EAHFgB,qBACAC,EAEEjB,EAFFiB,sBACAC,EACElB,EADFkB,sBAEF,OACE,yBAAKhC,UAAU,OACb,yBAAKA,UAAU,mCACb,0BAAMA,UAAU,mBAAmBqB,cAAY,kBAA/C,mBAEmBf,EAAkBwB,IAErC,yBAAK9B,UAAU,sBAEb,4BACEuB,QAASS,EACTZ,KAAK,SACLpB,UAAU,oBACVqB,cAAY,kBAEZ,0BAAMrB,UAAU,iBAGlB,4BACEuB,QAASQ,EACTX,KAAK,SACLpB,UAAU,oBACVqB,cAAY,kBAEZ,0BAAMrB,UAAU,mBC2HbiC,MAnJf,WAAqB,IAAD,EAC0BC,oBAAS,GADnC,mBACXlB,EADW,KACKmB,EADL,OAEgBD,oBAAS,GAFzB,mBAEXE,EAFW,KAEAC,EAFA,OAGYH,oBAAS,GAHrB,mBAGXI,EAHW,KAGFC,EAHE,OAIwBL,oBAAS,GAJjC,mBAIXM,EAJW,KAIIC,EAJJ,OAMsCP,mBAAS,IAN/C,mBAMXJ,EANW,KAMWY,EANX,OAOsCR,mBAAS,GAP/C,mBAOXR,EAPW,KAOWiB,EAPX,OAQ4BT,mBAAS,IARrC,mBAQXU,EARW,KAQMC,EARN,OAS4BX,mBAAS,GATrC,mBASXY,EATW,KASMC,EATN,OAU4Bb,mBAAS,IAVrC,mBAUXc,EAVW,KAUMC,EAVN,OAWsCf,mBAAS,GAX/C,mBAWXgB,EAXW,KAWWC,EAXX,OAa8BjB,mBAAS,GAbvC,mBAaXkB,EAbW,KAaOC,EAbP,KAmClB,SAASC,EAAWC,EAAgBC,EAAgBC,GAClD,OAAO,KAA0B,GAAjBF,EAAuBC,IAAoC,GAAjBC,GAAuB,IAyEnF,OClHa,SAAqBC,EAAUC,GAC5C,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAKR,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKC,aALX,WACEL,EAAcG,YAIaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,ID0BJQ,EACE,WAEEpB,GAAmB,SAAAqB,GAIjB,OAHW,IAAXA,EAAeA,EAAS,GAAKA,GAAU,EACxB,KAAXA,GACFvB,GAAmB,SAAArC,GAAO,OAAcoC,EAAkB,KACrDwB,KAIPf,EADEf,EACkB,SAAA+B,GAAe,OAAsBf,EAAWV,EAAiBE,EAAiBI,IAElF,SAAAmB,GAAe,OAAsBf,EAAWV,EAAiBE,EAAiBE,KAEhF,IAApBJ,GAA6C,IAApBE,IAO1BR,GAiBL,IAAIgC,MAAJ,gDAA0DC,OAC1DhC,GAAW,SAAAiC,GAAK,OAAY,KAC5BnB,GAAoB,SAAAoB,GAAQ,OAAe,KAC3C1B,GAAmB,SAAA2B,GAAO,OAAc,KACxC7B,GAAmB,SAAArC,GAAO,OAAcwC,OAbxC,IAAIsB,MAAJ,gDAA0DC,OAC1DhC,GAAW,SAAAiC,GAAK,OAAY,KAC5BnB,GAAoB,SAAAoB,GAAQ,OAAe,KAC3C1B,GAAmB,SAAA2B,GAAO,OAAc,KACxC7B,GAAmB,SAAArC,GAAO,OAAc0C,SAhBxClC,EAAiB,IAAO,MAqDxB,yBAAKhB,UAAU,YACb,yBAAKA,UAAU,OACb,kBAAC6B,EAAD,CAAeC,qBAAsBA,EAAsBE,sBAjGnC,WACxBF,EAAuB,IAAMd,GAAkBoB,GACjDM,GAAwB,SAAAlC,GAAO,OAAIA,EAAW,MA+F6DuB,sBA5FjF,WACxBD,EAAuB,KAAOd,GAAkBoB,GAClDM,GAAwB,SAAAlC,GAAO,OAAIA,EAAW,QA2F5C,kBAACiB,EAAD,CAAeC,qBAAsBA,EAAsBE,sBAxFnC,WACxBF,EAAuB,IAAMV,GAAkBoB,GACjDO,GAAwB,SAAAnC,GAAO,OAAIA,EAAW,MAsF6DmB,sBAnFjF,WACxBD,EAAuB,KAAOV,GAAkBoB,GAClDO,GAAwB,SAAAnC,GAAO,OAAIA,EAAW,SAmF9C,kBAACK,EAAD,CAAUE,UA9Bd,WACMqB,IACFa,GAAmB,SAAA0B,GAAQ,OAAe7C,KAC1CqB,GAAwB,SAAAwB,GAAQ,OAAejD,KAC/CmB,GAAmB,SAAA8B,GAAQ,OAAe7C,KAC1CO,GAAa,SAAAmC,GAAK,OAAY,MAEhC/B,GAAiB,SAAA+B,GAAK,OAAY,KAClCrC,GAAkB,SAACyC,GAAD,OAAgBA,MAsBAlF,WAAYA,EAAYsB,eAAgBA,EAAgBC,WAnB5F,WACEoB,GAAa,SAAAmC,GAAK,OAAY,KAC9BrC,GAAkB,SAAAqC,GAAK,OAAY,KACnCjC,GAAW,SAAAiC,GAAK,OAAY,KAC5B/B,GAAiB,SAAA+B,GAAK,OAAY,KAElCnB,GAAoB,SAAAoB,GAAQ,OAAe,KAC3C1B,GAAmB,SAAA2B,GAAO,OAAc,KACxC7B,GAAmB,SAAA8B,GAAQ,OAAe7C,KAC1CmB,GAAmB,SAAA0B,GAAQ,OAAe7C,KAC1CqB,GAAwB,SAAAwB,GAAQ,OAAejD,QAU7C,yBAAKmD,MAAOrC,EAAgB,CAACsC,QAAS,SAAW,CAACA,QAAS,SACzD,yBAAK9E,UAAU,YACb,yBAAKA,UAAU,OACb,wBAAIqB,cAAY,iBACZiB,EAAuB,WAAb,WADd,QAC4FhC,EAA/CgC,EAAiEY,EAArCF,GADzE,YAGA,uBAAGhD,UAAU,OAAOqB,cAAY,qBJpGrC,SAA2B0D,GAChC,IAAMvE,EAAUC,KAAKC,MAAOqE,EAAe,KAAQ,IAChDpE,WACAC,SAAS,EAAG,KACT8D,EAAUjE,KAAKuE,MAAMD,EAAe,IACvCpE,WACAC,SAAS,EAAG,KACf,MAAM,GAAN,OAAUJ,EAAV,YAAqBkE,GI8FRO,CAAqC,GAAlBrC,EAAwBE,GAD9C,cAGA9B,EAAmC,KAAlB,wCAGrB,yBAAKhB,UAAU,YACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,WAAW6E,MAAO,CAAEK,OAAQ,SACzC,yBACElF,UAAU,eACVkB,KAAK,cACLiE,gBAAc,IACdC,gBAAc,MACdC,gBAAejC,EACfyB,MAAO,CAAES,MAAM,GAAD,OAAKlC,EAAL,cEjIfmC,MAbf,WACE,OACE,yBAAKvF,UAAU,OACb,4BAAQA,UAAU,wBAChB,+CAEF,yBAAKA,UAAU,aACb,kBAAC,EAAD,SCPRwF,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.379ef4ad.chunk.js","sourcesContent":["/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\r\n\r\nexport default function PlayStop(props) {\r\n  const { playPause, classNames, isTimerRunning, stopButton } = props;\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col\">\r\n        <div\r\n          className=\"btn-group btn-group-lg mb-2\"\r\n          role=\"group\"\r\n          aria-label=\"Timer controls\"\r\n        >\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            data-testid=\"play-pause\"\r\n            title=\"Start or pause timer\"\r\n            onClick={playPause}\r\n          >\r\n            <span\r\n              className={classNames({\r\n                oi: true,\r\n                \"oi-media-play\": !isTimerRunning,\r\n                \"oi-media-pause\": isTimerRunning,\r\n              })}\r\n            />\r\n          </button>\r\n          {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\r\n          <button\r\n            onClick={stopButton}\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            title=\"Stop the session\"\r\n          >\r\n            <span className=\"oi oi-media-stop\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { minutesToDuration } from '../utils/duration';\r\n\r\nexport default function BreakDuration(props) {\r\n  const {\r\n    breakDurationMinutes,\r\n    increaseBreakDuration,\r\n    decreaseBreakDuration,\r\n  } = props;\r\n  return (\r\n    <div className=\"col\">\r\n      <div className=\"float-right\">\r\n        <div className=\"input-group input-group-lg mb-2\">\r\n          <span className=\"input-group-text\" data-testid=\"duration-break\">\r\n            {/* TODO: Update this text to display the current break session duration */}\r\n            Break Duration: {minutesToDuration(breakDurationMinutes)}\r\n          </span>\r\n          <div className=\"input-group-append\">\r\n            {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\r\n            <button\r\n              onClick={decreaseBreakDuration}\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-testid=\"decrease-break\"\r\n            >\r\n              <span className=\"oi oi-minus\" />\r\n            </button>\r\n            {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\r\n            <button\r\n              onClick={increaseBreakDuration}\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-testid=\"increase-break\"\r\n            >\r\n              <span className=\"oi oi-plus\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { minutesToDuration } from '../utils/duration';\r\n\r\nexport default function FocusDuration(props) {\r\n  const {\r\n    focusDurationMinutes,\r\n    increaseFocusDuration,\r\n    decreaseFocusDuration,\r\n  } = props;\r\n  return (\r\n    <div className=\"col\">\r\n      <div className=\"input-group input-group-lg mb-2\">\r\n        <span className=\"input-group-text\" data-testid=\"duration-focus\">\r\n          {/* TODO: Update this text to display the current focus session duration */}\r\n          Focus Duration: {minutesToDuration(focusDurationMinutes)}\r\n        </span>\r\n        <div className=\"input-group-append\">\r\n          {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\r\n          <button\r\n            onClick={decreaseFocusDuration}\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            data-testid=\"decrease-focus\"\r\n          >\r\n            <span className=\"oi oi-minus\" />\r\n          </button>\r\n          {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\r\n          <button\r\n            onClick={increaseFocusDuration}\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            data-testid=\"increase-focus\"\r\n          >\r\n            <span className=\"oi oi-plus\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from '../utils/duration';\nimport { secondsToDuration } from '../utils/duration';\nimport PlayStop from \"./PlayStop\";\nimport BreakDuration from \"./BreakDuration\";\nimport FocusDuration from \"./FocusDuration\";\n\nfunction Pomodoro() {\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [firstPlay, setFirstPlay] = useState(true);\n  const [onBreak, setOnBreak] = useState(false);\n  const [activeSession, setActiveSession] = useState(false);\n\n  const [focusDurationMinutes, setFocusDurationMinutes] = useState(25);\n  const [breakDurationMinutes, setBreakDurationMinutes] = useState(5);\n  const [durationMinutes, setDurationMinutes] = useState(25);\n  const [durationSeconds, setDurationSeconds] = useState(0);\n  const [initialDuration, setInitialDuration] = useState(25);\n  const [initialBreakDuration, setInitialBreakDuration] = useState(5);\n\n  const [durationProgress, setDurationProgress] = useState(0);\n\n  const decreaseFocusDuration = () => {\n    if (focusDurationMinutes > 5 && !isTimerRunning && firstPlay)\n      setFocusDurationMinutes(minutes => minutes -= 5);\n  }\n\n  const increaseFocusDuration = () => {\n    if (focusDurationMinutes < 60 && !isTimerRunning && firstPlay)\n      setFocusDurationMinutes(minutes => minutes += 5);\n  }\n\n  const decreaseBreakDuration = () => {\n    if (breakDurationMinutes > 1 && !isTimerRunning && firstPlay)\n      setBreakDurationMinutes(minutes => minutes -= 1);\n  }\n\n  const increaseBreakDuration = () => {\n    if (breakDurationMinutes < 15 && !isTimerRunning && firstPlay)\n      setBreakDurationMinutes(minutes => minutes += 1);\n  }\n\n  function percentage(currentMinutes, currentSeconds, initialMinutes) {\n    return 100 - (((currentMinutes * 60) + currentSeconds) / (initialMinutes * 60) * 100);\n  }\n\n  useInterval(\n    () => {\n      // What should happen when the timer is running\n      setDurationSeconds(second => {\n        second === 0 ? second = 59 : second -= 1;\n        if (second === 59)\n          setDurationMinutes(minutes => minutes = durationMinutes - 1);\n        return second;\n      });\n\n      if (onBreak)\n        setDurationProgress(currentProgress => currentProgress = percentage(durationMinutes, durationSeconds, initialBreakDuration))\n      else\n        setDurationProgress(currentProgress => currentProgress = percentage(durationMinutes, durationSeconds, initialDuration))\n\n      if (durationMinutes === 0 && durationSeconds === 1)\n        timerExpired();\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function timerExpired() {\n    if (!onBreak)\n      focusSessionExpired();\n    else\n      breakSessionExpired();\n  }\n\n  // Start our break session\n  function focusSessionExpired() {\n    new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play(); // Play's a gong sound\n    setOnBreak(state => state = true);\n    setDurationProgress(progress => progress = 0);\n    setDurationSeconds(seconds => seconds = 0);\n    setDurationMinutes(minutes => minutes = initialBreakDuration);\n  }\n\n  // Reset our focus session\n  function breakSessionExpired() {\n    new Audio(`https://bigsoundbank.com/UPLOAD/mp3/0899.mp3`).play(); // Play's a bell alert\n    setOnBreak(state => state = false);\n    setDurationProgress(progress => progress = 0);\n    setDurationSeconds(seconds => seconds = 0);\n    setDurationMinutes(minutes => minutes = initialDuration);\n  }\n\n  function playPause() {\n    if (firstPlay) {\n      setInitialDuration(duration => duration = focusDurationMinutes);\n      setInitialBreakDuration(duration => duration = breakDurationMinutes);\n      setDurationMinutes(duration => duration = focusDurationMinutes);\n      setFirstPlay(state => state = false);\n    }\n    setActiveSession(state => state = true);\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  function stopButton() {\n    setFirstPlay(state => state = true);\n    setIsTimerRunning(state => state = false);\n    setOnBreak(state => state = false);\n    setActiveSession(state => state = false);\n\n    setDurationProgress(progress => progress = 0);\n    setDurationSeconds(seconds => seconds = 0);\n    setDurationMinutes(duration => duration = focusDurationMinutes);\n    setInitialDuration(duration => duration = focusDurationMinutes);\n    setInitialBreakDuration(duration => duration = breakDurationMinutes);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <FocusDuration focusDurationMinutes={focusDurationMinutes} decreaseFocusDuration={decreaseFocusDuration} increaseFocusDuration={increaseFocusDuration} />\n        <BreakDuration breakDurationMinutes={breakDurationMinutes} decreaseBreakDuration={decreaseBreakDuration} increaseBreakDuration={increaseBreakDuration} />\n      </div>\n      <PlayStop playPause={playPause} classNames={classNames} isTimerRunning={isTimerRunning} stopButton={stopButton} />\n      <div style={activeSession ? {display: \"block\"} : {display: \"none\"}}>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <h2 data-testid=\"session-title\">\n              {!onBreak ? \"Focusing\" : \"On Break\"} for {!onBreak ? minutesToDuration(initialDuration) : minutesToDuration(initialBreakDuration)} minutes\n          </h2>\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration((durationMinutes * 60) + durationSeconds)} remaining\n          </p>\n          {!isTimerRunning ? <h2>PAUSED</h2> : null}\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={durationProgress}\n                style={{ width: `${durationProgress}%` }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}